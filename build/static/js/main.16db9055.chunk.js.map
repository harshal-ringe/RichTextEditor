{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["renderItem","item","initials","fullnameArray","String","value","toUpperCase","split","length","charAt","Fragment","id","style","display","cursor","undefined","avatar","className","src","title","App","props","getMentionContents","entityMap","convertToRaw","state","editorState","getCurrentContent","mentions","Object","values","forEach","entity","type","push","data","url","replace","renderMentionData","mentionData","map","i","text","onEditorStateChange","setState","EditorState","createEmpty","isToolbarHidden","overflowX_value","this","content","htmlToDraft","contentBlocks","ContentState","createFromBlockArray","pop","createWithContent","draftToHtml","trim","options","html","callback","setTimeout","window","richTextEditor","toolbarHidden","ref","Editor","editor","toolbar","inline","list","link","blockType","inDropdown","component","dropdownClassName","image","alignmentEnabled","previewImage","defaultSize","height","width","mention","separator","trigger","suggestions","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16db9055.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorState, ContentState, convertFromHTML, convertToRaw } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport '../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\n\nfunction renderItem(item) {\n\tlet fullnameArray = String(item.value).toUpperCase().split(' ');\n\tlet initials;\n\tif (fullnameArray.length == 1) {\n\t\tinitials = fullnameArray[0] ? fullnameArray[0].charAt(0) : '?';\n\t} else {\n\t\tinitials = fullnameArray[0].charAt(0) + fullnameArray[1].charAt(0);\n\t}\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div id={\"draft-mention-editor-\" + item.id} style={{ display: 'flex', cursor: 'pointer' }}>\n\t\t\t\t{\n\t\t\t\t\t(item.avatar != undefined && item.avatar != '') ?\n\t\t\t\t\t\t<img className=\"draft-mention-avatar\" src={item.avatar} />\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<div className=\"display-center draft-mention-avatar\">\n\t\t\t\t\t\t\t{initials}\n\t\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\t(item.title != undefined && item.title != '') ?\n\t\t\t\t\t\t<div className=\"mention-name\" title={item.value}>\n\t\t\t\t\t\t\t{item.value}\n\t\t\t\t\t\t\t<div title={item.title} className=\"mention-title\">\n\t\t\t\t\t\t\t\t{item.title}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<div className=\"mention-name\" title={item.value}>\n\t\t\t\t\t\t\t{item.value}\n\t\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t</React.Fragment>\n\t)\n}\nexport default class App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\teditorState: EditorState.createEmpty(),\n\t\t\tisToolbarHidden: false,\n\t\t\tmentionData: []\n\t\t};\n\t\tthis.overflowX_value = \"unset\";\n\t}\n\n\tshowToolbar() {\n\t\tthis.setState({ isToolbarHidden: false })\n\t}\n\n\thideToolbar() {\n\t\tthis.setState({ isToolbarHidden: true })\n\t}\n\n\tset(content) {\n\t\tconst { contentBlocks, entityMap } = htmlToDraft(content);\n\t\tObject.values(convertToRaw(ContentState.createFromBlockArray(contentBlocks, entityMap)).entityMap).forEach(entity => {\n\t\t\tif (entity.type === 'MENTION') {\n\t\t\t\tentity.data.url = '#' + entity.data.url.split(\"#\").pop()\n\t\t\t}\n\t\t});\n\t\tthis.setState({ editorState: EditorState.createWithContent(ContentState.createFromBlockArray(contentBlocks, entityMap)) }, () => {\n\t\t\tthis.onEditorStateChange(this.state.editorState);\n\t\t});\n\t}\n\n\tgetText() {\n\t\tlet text = draftToHtml(convertToRaw(this.state.editorState.getCurrentContent())).replace(/(<([^>]+)>)/ig, \"\");\n\t\tif (typeof text == \"string\") {\n\t\t\treturn text.trim();\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tget(options) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tlet html = '';\n\t\t// html = draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\n\t\t\n\t\tif (options && options.callback) {\n\t\t\tsetTimeout(() => {\n\t\t\t\thtml = draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\n\t\t\t\toptions.callback(html);\n\t\t\t}, 100)\n\t\t} else {\n\t\t\treturn draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\n\t\t}\n\t}\n\n\tsetMentionData(data) {\n\t\tthis.setState({ mentionData: data });\n\t}\n\n\tgetMentionContents = () => {\n\t\tconst entityMap = convertToRaw(this.state.editorState.getCurrentContent()).entityMap;\n\t\tconst mentions = [];\n\n\t\tObject.values(entityMap).forEach(entity => {\n\t\t\tif (entity.type === 'MENTION') {\n\t\t\t\tmentions.push({ \"id\": entity.data.url.replace('#', ''), \"value\": entity.data.value });\n\t\t\t}\n\t\t});\n\t\treturn mentions;\n\t}\n\n\trenderMentionData = () => {\n\t\tlet mentions = []\n\t\tif (this.state.mentionData.length) {\n\t\t\tthis.state.mentionData.map((item, i) => {\n\t\t\t\tmentions.push({\n\t\t\t\t\ttext: renderItem(item),\n\t\t\t\t\tvalue: item.value,\n\t\t\t\t\turl: '#' + item.id\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\treturn mentions;\n\t}\n\n\tonEditorStateChange = (editorState) => {\n\t\tthis.setState({ editorState })\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.richTextEditor = this;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{/* <div style={{position:\"fixed\", top: \"9px\", right: \"8px\", height: \"20px\", zIndex: 1000}}>\n\t\t\t\t\t\t// {/* <button onClick={()=>{ setTimeout(()=>{alert(this.get());}, 100)}}>GET</button> */}\n\t\t\t\t{/* <button onClick={()=>{ alert(this.get());}}>GET</button> */}\n\t\t\t\t{/* </div> */}\n\t\t\t\t<div className=\"draftjs-editor-container\" >\n\t\t\t\t\t<Editor\n\t\t\t\t\t\ttoolbarHidden={this.state.isToolbarHidden}\n\t\t\t\t\t\tref={(Editor) => { this.editor = Editor }}\n\t\t\t\t\t\teditorState={this.state.editorState}\n\t\t\t\t\t\tonEditorStateChange={this.onEditorStateChange}\n\t\t\t\t\t\ttoolbar={{\n\t\t\t\t\t\t\toptions: ['blockType', 'inline', 'colorPicker', 'link', 'list', 'textAlign'],\n\t\t\t\t\t\t\tinline: {\n\t\t\t\t\t\t\t\toptions: ['bold', 'italic', 'underline', 'strikethrough'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlist: {\n\t\t\t\t\t\t\t\toptions: ['unordered', 'ordered']\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlink: {\n\t\t\t\t\t\t\t\toptions: ['link'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tblockType: {\n\t\t\t\t\t\t\t\tinDropdown: true,\n\t\t\t\t\t\t\t\toptions: ['Normal', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'],\n\t\t\t\t\t\t\t\tclassName: undefined,\n\t\t\t\t\t\t\t\tcomponent: undefined,\n\t\t\t\t\t\t\t\tdropdownClassName: undefined,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\t\talignmentEnabled: false,\n\t\t\t\t\t\t\t\tpreviewImage: true,\n\t\t\t\t\t\t\t\t// uploadCallback: this.uploadImageCallBack,\n\t\t\t\t\t\t\t\tdefaultSize: {\n\t\t\t\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\t\t\t\twidth: '100',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlink: {\n\t\t\t\t\t\t\t\t// linkCallback: this.linkCallback//params => ({ ...params })\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tmention={{\n\t\t\t\t\t\t\tseparator: ' ',\n\t\t\t\t\t\t\ttrigger: '@',\n\t\t\t\t\t\t\tsuggestions: (this.state.mentionData.length) ? this.renderMentionData() : [{}]\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}